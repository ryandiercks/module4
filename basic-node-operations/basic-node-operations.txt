1. Run the commands sort, wc and uniq on the commands.js file. Explain how they work and what the output was.

- Sort-works by sorting a list of items alphabetically and numerically. It uses the Merge Sort Algorithm to sort then output the lines 
of its input or concatenation of all files listed in its argument list in sorted order. Sorting is done based on one or more sort keys extracted from each 
line of input like so using sort command.js:

```

       });
   }
}
}
};
        }
        },
                break;
                break;
        case 'cat':
        case 'echo':
        'cat': function(fullPath) {
                commandLibrary.cat(userInputArray.slice(1));
                commandLibrary.echo(userInputArray.slice(1).join(' '));
const commandLibrary = {
        const command = userInputArray[0];
       const fileName = fullPath[0];
const fs = require('fs');
        const userInputArray = userInput.split(' ');
           done(data);
                done(userInput);
        'echo': function(userInput) {
       fs.readFile(fileName, (err, data) => {
function done(output) {
function evaluateCmd(userInput) {
           if (err) throw err;
module.exports.commandLibrary = commandLibrary;
module.exports.evaluateCmd = evaluateCmd;
        //parses the user input to understand which command was typed
        process.stdout.write('\nprompt > ');
        process.stdout.write(output);
        switch (command) {
                //we will add the functionality of echo next within the object commandLibrary
//where we will store our commands
//where we will store the logic of our commands
//write out data

```


wc: checks the file for every line, word and character used. wc (short for word count) reads either standard input 
or a list of files and generates one or more of the following statistics: newline count, word count, and byte count. If a list of 
files is provided, both individual file and total statistics are returned like so using wc command.js:

The output was 40  113 1013 commands.js


uniq: removes identical adjacent lines but since no lines are identical just preforms `cat`. 




2. Using the pipe (|) connect at least two commands and run it on commands.js. Explain what the output was and why the specific data was outputted.

sort commands.js | uniq | wc This piped command sorts command.js, removes any lines that are the same as the one adjacent, then returns a count of
the lines, words, and byte count (depending on encoding this could also be the character count). 5 fewer lines, 2 fewer words, 14 fewer characters
than wc commands.js

6.

function reverseString(inputString) {
	var words = inputString.split(' ');
	var reversed = [];
	words.forEach((word) =>{
		reversed.push(word.split('').reverse().join(''));
	});
  return reversed.join(' ');
}
