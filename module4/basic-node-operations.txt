1. Run the commands sort, wc and uniq on the commands.js file. Explain how they work and what the output was.

sort: Uses the Merge Sort Algorithm to sort then output the lines of its input or concatenation of all files listed in its argument list in sorted order.
Sorting is done based on one or more sort keys extracted from each line of input

wc: wc (short for word count) reads either standard input or a list of files and generates one or more of the following statistics: newline count, word count, and
byte count. If a list of files is provided, both individual file and total statistics are returned like so using wc command.js:


 40  113 1013 commands.js


uniq: when fed a text file, outputs the file with adjacent identical lines collapsed to one.Typically it is used after sort like so using sort commands.js | uniq | wc:

35     111     999
// 5 fewer lines, 2 fewer words, 14 fewer characters than before with the wc command

2. Using the pipe (|) connect at least two commands and run it on commands.js. Explain what the output was and why the specific data was outputted.

sort commands.js | uniq | wc This piped command sorts command.js, removes any lines that are the same as the one adjacent, then returns a count of
the lines, words, and byte count (depending on encoding this could also be the character count). 5 fewer lines, 2 fewer words, 14 fewer characters
than wc commands.js

6.

function reverseString(inputString) {
	var words = inputString.split(' ');
	var reversed = [];
	words.forEach((word) =>{
		reversed.push(word.split('').reverse().join(''));
	});
  return reversed.join(' ');
}
